/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FreeDayService } from "../freeDay.service";
import { FreeDayCreateInput } from "./FreeDayCreateInput";
import { FreeDay } from "./FreeDay";
import { FreeDayFindManyArgs } from "./FreeDayFindManyArgs";
import { FreeDayWhereUniqueInput } from "./FreeDayWhereUniqueInput";
import { FreeDayUpdateInput } from "./FreeDayUpdateInput";
import { FreeDayDto } from "../FreeDayDto";

export class FreeDayControllerBase {
  constructor(protected readonly service: FreeDayService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FreeDay })
  async createFreeDay(
    @common.Body() data: FreeDayCreateInput
  ): Promise<FreeDay> {
    return await this.service.createFreeDay({
      data: data,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FreeDay] })
  @ApiNestedQuery(FreeDayFindManyArgs)
  async freeDays(@common.Req() request: Request): Promise<FreeDay[]> {
    const args = plainToClass(FreeDayFindManyArgs, request.query);
    return this.service.freeDays({
      ...args,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FreeDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async freeDay(
    @common.Param() params: FreeDayWhereUniqueInput
  ): Promise<FreeDay | null> {
    const result = await this.service.freeDay({
      where: params,
      select: {
        createdAt: true,
        date: true,
        description: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FreeDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFreeDay(
    @common.Param() params: FreeDayWhereUniqueInput,
    @common.Body() data: FreeDayUpdateInput
  ): Promise<FreeDay | null> {
    try {
      return await this.service.updateFreeDay({
        where: params,
        data: data,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FreeDay })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFreeDay(
    @common.Param() params: FreeDayWhereUniqueInput
  ): Promise<FreeDay | null> {
    try {
      return await this.service.deleteFreeDay({
        where: params,
        select: {
          createdAt: true,
          date: true,
          description: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/")
  @swagger.ApiOkResponse({
    type: FreeDayDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListFreeDays(
    @common.Body()
    body: string
  ): Promise<FreeDayDto[]> {
    return this.service.ListFreeDays(body);
  }
}
