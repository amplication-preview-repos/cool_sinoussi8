/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FreeDay as PrismaFreeDay } from "@prisma/client";
import { FreeDayDto } from "../FreeDayDto";

export class FreeDayServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FreeDayCountArgs, "select">): Promise<number> {
    return this.prisma.freeDay.count(args);
  }

  async freeDays(args: Prisma.FreeDayFindManyArgs): Promise<PrismaFreeDay[]> {
    return this.prisma.freeDay.findMany(args);
  }
  async freeDay(
    args: Prisma.FreeDayFindUniqueArgs
  ): Promise<PrismaFreeDay | null> {
    return this.prisma.freeDay.findUnique(args);
  }
  async createFreeDay(args: Prisma.FreeDayCreateArgs): Promise<PrismaFreeDay> {
    return this.prisma.freeDay.create(args);
  }
  async updateFreeDay(args: Prisma.FreeDayUpdateArgs): Promise<PrismaFreeDay> {
    return this.prisma.freeDay.update(args);
  }
  async deleteFreeDay(args: Prisma.FreeDayDeleteArgs): Promise<PrismaFreeDay> {
    return this.prisma.freeDay.delete(args);
  }
  async ListFreeDays(args: string): Promise<FreeDayDto[]> {
    throw new Error("Not implemented");
  }
}
