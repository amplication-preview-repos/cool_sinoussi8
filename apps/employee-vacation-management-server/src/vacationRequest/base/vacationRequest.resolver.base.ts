/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VacationRequest } from "./VacationRequest";
import { VacationRequestCountArgs } from "./VacationRequestCountArgs";
import { VacationRequestFindManyArgs } from "./VacationRequestFindManyArgs";
import { VacationRequestFindUniqueArgs } from "./VacationRequestFindUniqueArgs";
import { CreateVacationRequestArgs } from "./CreateVacationRequestArgs";
import { UpdateVacationRequestArgs } from "./UpdateVacationRequestArgs";
import { DeleteVacationRequestArgs } from "./DeleteVacationRequestArgs";
import { ApprovalFindManyArgs } from "../../approval/base/ApprovalFindManyArgs";
import { Approval } from "../../approval/base/Approval";
import { Employee } from "../../employee/base/Employee";
import { VacationRequestDto } from "../VacationRequestDto";
import { VacationRequestService } from "../vacationRequest.service";
@graphql.Resolver(() => VacationRequest)
export class VacationRequestResolverBase {
  constructor(protected readonly service: VacationRequestService) {}

  async _vacationRequestsMeta(
    @graphql.Args() args: VacationRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VacationRequest])
  async vacationRequests(
    @graphql.Args() args: VacationRequestFindManyArgs
  ): Promise<VacationRequest[]> {
    return this.service.vacationRequests(args);
  }

  @graphql.Query(() => VacationRequest, { nullable: true })
  async vacationRequest(
    @graphql.Args() args: VacationRequestFindUniqueArgs
  ): Promise<VacationRequest | null> {
    const result = await this.service.vacationRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VacationRequest)
  async createVacationRequest(
    @graphql.Args() args: CreateVacationRequestArgs
  ): Promise<VacationRequest> {
    return await this.service.createVacationRequest({
      ...args,
      data: {
        ...args.data,

        employee: args.data.employee
          ? {
              connect: args.data.employee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VacationRequest)
  async updateVacationRequest(
    @graphql.Args() args: UpdateVacationRequestArgs
  ): Promise<VacationRequest | null> {
    try {
      return await this.service.updateVacationRequest({
        ...args,
        data: {
          ...args.data,

          employee: args.data.employee
            ? {
                connect: args.data.employee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VacationRequest)
  async deleteVacationRequest(
    @graphql.Args() args: DeleteVacationRequestArgs
  ): Promise<VacationRequest | null> {
    try {
      return await this.service.deleteVacationRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Approval], { name: "approvals" })
  async findApprovals(
    @graphql.Parent() parent: VacationRequest,
    @graphql.Args() args: ApprovalFindManyArgs
  ): Promise<Approval[]> {
    const results = await this.service.findApprovals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  async getEmployee(
    @graphql.Parent() parent: VacationRequest
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VacationRequestDto)
  async CreateVacationRequest(
    @graphql.Args()
    args: VacationRequestDto
  ): Promise<VacationRequestDto> {
    return this.service.CreateVacationRequest(args);
  }
}
